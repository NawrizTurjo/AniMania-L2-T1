CREATE DATABASE ANIMANIA;

CREATE TABLE person (
    id serial PRIMARY KEY,
    user_name VARCHAR(255) NOT NULL,
    password TEXT NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    role VARCHAR(255) NOT NULL,
    IMG_URL VARCHAR(255)
);


CREATE TABLE "USER"(
    USER_ID INT REFERENCES person(ID) PRIMARY KEY, 
    BIO VARCHAR(255),
    MOST_FAVOURITE_ANIME VARCHAR(255),
    first_access timestamp without time zone,
    last_access timestamp without time zone,
    active_time interval
);

CREATE TABLE MODERATOR( 
    MODERATOR_ID INT REFERENCES person(ID) PRIMARY KEY,
    ADDED_SERIES INT,
    DELETED_SERIES INT,
    ADDED_EPISODES INT,
    DELETED_EPISODES INT,
    review_verifications INT,
    FILTERED_COMMENTS INT
);

CREATE TABLE ANIME(
    ANIME_ID INT PRIMARY KEY,
    ANIME_NAME VARCHAR(255),
    NUMBER_OF_EPISODES INT,
    ANIME_TYPE VARCHAR(255),
    AGE_RATING VARCHAR(255),
    DEMOGRAPHIC VARCHAR(255),
    SEASON VARCHAR(255),
    YEAR INT,
    ANIME_SOURCE VARCHAR(255),
    DESCRIPTION VARCHAR(4000),
    TITLE_SCREEN VARCHAR(250),
    NEXT_SEASON VARCHAR(250),
    PREVIOUS_SEASON VARCHAR(250),
    MAL_SCORE FLOAT,
    STREAMING_SITES VARCHAR(255)
);

CREATE TABLE TAGS(
    TAG_ID INT PRIMARY KEY,
    TAG_NAME VARCHAR(250),
);

CREATE TABLE TAG_ID_TABLE(
    ANIME_ID INT REFERENCES ANIME(ANIME_ID),
    TAG_ID INT REFERENCES TAGS(TAG_ID),
    PRIMARY KEY(ANIME_ID,TAG_ID)
);

CREATE TABLE GENRES(
    GENRE_ID INT PRIMARY KEY,
    GENRE_NAME VARCHAR(250)
);

CREATE TABLE GENRE_ANIME_RELATIONSHIP(
    GENRE_ID INT REFERENCES GENRES(GENRE_ID),
    ANIME_ID INT REFERENCES ANIME(ANIME_ID),
    PRIMARY KEY(GENRE_ID,ANIME_ID)
);

CREATE TABLE STAFFS (
    ANIME_ID INT REFERENCES ANIME(ANIME_ID),
    STAFF_ID INT,
    NAME VARCHAR(255),
    ROLE VARCHAR(255),
    PROFILE_PICTURE VARCHAR(255),
    GENDER VARCHAR(10),
    DATE_OF_BIRTH DATE,
    SALARY INT
    PRIMARY KEY(ANIME_ID,STAFF_ID)
);

CREATE TABLE CHARACTERS(
    CHARACTER_ID INT PRIMARY KEY,
    CHARACTER_NAME VARCHAR(250),
    "ROLE" VARCHAR(250),
    GENDER VARCHAR(250),
    PROFILE_PICTURE VARCHAR(250)
);

CREATE TABLE CHARACTER_ANIME_RELATIONSHIP(
    CHARACTER_ID INT REFERENCES CHARACTERS(CHARACTER_ID),
    ANIME_ID INT REFERENCES ANIME(ANIME_ID),
    PRIMARY KEY(CHARACTER_ID,ANIME_ID)
);

CREATE TABLE STUDIO( 
    STUDIO_ID INT PRIMARY KEY,
    STUDIO_NAME VARCHAR(255),
    BUDGET INT,
    REVENUE INT,
    NO_OF_EMPLOYEES INT,
    COUNTRY VARCHAR(255)
);

CREATE TABLE ANIME_STUDIO_RELATIONSHIP(
    ANIME_ID INT REFERENCES ANIME(ANIME_ID),
    STUDIO_ID INT REFERENCES STUDIO(STUDIO_ID),
    PRIMARY KEY(ANIME_ID,STUDIO_ID)
);

CREATE TABLE EPISODES (
    ANIME_ID INT REFERENCES ANIME(ANIME_ID),
    EPISODE_NO INT,
    EPISODE_TITLE VARCHAR(255),
    THUMBNAIL VARCHAR(255),
    "LENGTH" VARCHAR(255), 
    RELEASE_DATE DATE,
    AVAILABILITY VARCHAR(255),
    STREAMING_SITES VARCHAR(255),
    PRIMARY KEY(ANIME_ID,EPISODE_NO)
);

CREATE TABLE SUBTITLES (
    ANIME_ID INT,
    EPISODE_NO INT,
    SUBTITLE_ID INT,
    LANGUAGE VARCHAR(255),
    CREATOR VARCHAR(255),
    URL VARCHAR(255),
    PRIMARY KEY (ANIME_ID, EPISODE_NO, SUBTITLE_ID),
    FOREIGN KEY (ANIME_ID,EPISODE_NO) REFERENCES EPISODES(ANIME_ID,EPISODE_NO)
);

CREATE TABLE SOUND_TRACKS (
    ANIME_ID INT REFERENCES ANIME(ANIME_ID),
    TITLE VARCHAR(255),
    BAND VARCHAR(255),
    PRIMARY KEY(ANIME_ID,TITLE)
);

CREATE TABLE WATCH_HISTORY(
    USER_ID INT REFERENCES person(ID),
    ANIME_ID INT ,
    EPISODE_NO INT,
    TIME DATE,
    VIEW_NO INT,
    FOREIGN KEY(ANIME_ID,EPISODE_NO) REFERENCES EPISODES(ANIME_ID,EPISODE_NO),
    PRIMARY KEY(USER_ID, ANIME_ID, EPISODE_NO)
);

CREATE TABLE USERS_ANIME_LIST(
    USER_ID INT REFERENCES person(ID),
    STATUS VARCHAR(250),
    ANIME_ID INT REFERENCES ANIME(ANIME_ID),
    RATING INT,
    START_DATE DATE,
    END_DATE DATE,
    EPISODES_WATCHED INT,
    FAVOURITE VARCHAR(250),
    PRIMARY KEY(USER_ID, ANIME_ID)
);

CREATE TABLE REVIEW(
    ANIME_ID INT REFERENCES ANIME(ANIME_ID),
    MODERATOR_ID INT REFERENCES person(ID),
    USER_ID INT REFERENCES person(ID),
    REVIEW_ID serial INT PRIMARY KEY,
    review_text text,
    review_time timestamp,
    STATUS VARCHAR(10),
    review_role VARCHAR(100)
);

CREATE TABLE COMMENTS(
    ANIME_ID INT,
    EPISODE_NO INT,
    PARENT_ID INT DEFAULT NULL,
    MODERATOR_ID INT REFERENCES person(ID),
    USER_ID INT REFERENCES person(ID),
    COMMENT_ID serial INT PRIMARY KEY,
    text text,
    comment_time timestamp,
    STATUS VARCHAR(10),
    comment_role VARCHAR(100),
    FOREIGN KEY(ANIME_ID,EPISODE_NO) REFERENCES EPISODES(ANIME_ID,EPISODE_NO)
);

CREATE TABLE REACTION(
    USER_ID INT REFERENCES person(ID),
    COMMENT_ID INT REFERENCES COMMENTS(COMMENT_ID),
    REACTION_TYPE VARCHAR(1),
    PRIMARY KEY(USER_ID, COMMENT_ID)
);



















